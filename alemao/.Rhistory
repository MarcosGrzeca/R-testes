options(max.print = 99999999)
DIRETORIO = "C:\\Users\\Marcos\\Documents\\GitHub\\R-testes\\"
source(file=paste(DIRETORIO,"functions.R", sep = ""))
DATABASE <- "alemao"
clearConsole();
dados <- query("SELECT id, texto, alc FROM conversa")
dados$alc[dados$alc == "cna"] <- "na"
dados$alc <- as.factor(dados$alc)
str(dados)
clearConsole()
library(text2vec)
library(data.table)
setDT(dados)
setkey(dados, id)
set.seed(2016L)
all_ids = dados$id
train_ids = sample(all_ids, nrow(dados))
test_ids = setdiff(all_ids, train_ids)
train = dados[J(train_ids)]
test = dados[J(test_ids)]
prep_fun = tolower
tok_fun = word_tokenizer
stop_words = c("aber","als","am","an","auch","auf","aus","bei","bin","bis","bist","da","dadurch","daher","darum","das","da?","dass","dein","deine","dem","den","der","des","dessen","deshalb","die","dies","dieser","dieses","doch","dort","du","durch","ein","eine","einem","einen","einer","eines","er","es","euer","eure","f?r","hatte","hatten","hattest","hattet","hier","hinter","ich","ihr","ihre","im","in","ist","ja","jede","jedem","jeden","jeder","jedes","jener","jenes","jetzt","kann","kannst","k?nnen","k?nnt","machen","mein","meine","mit","mu?","mu?t","musst","m?ssen","m??t","nach","nachdem","nein","nicht","nun","oder","seid","sein","seine","sich","sie","sind","soll","sollen","sollst","sollt","sonst","soweit","sowie","und","unser","unsere","unter","vom","von","vor","wann","warum","was","weiter","weitere","wenn","wer","werde","werden","werdet","weshalb","wie","wieder","wieso","wir","wird","wirst","wo","woher","wohin","zu","zum","zur","?ber")
it_train = itoken(train$texto,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = train$id,
progressbar = TRUE)
vocab = create_vocabulary(it_train, stopwords = stop_words)
vectorizer = vocab_vectorizer(vocab)
t1 = Sys.time()
dtm_train = create_dtm(it_train, vectorizer)
print(difftime(Sys.time(), t1, units = 'sec'))
dim(dtm_train)
identical(rownames(dtm_train), train$id)
dtm_train
df <- rbind(dtm_train,dados$alc)
nrows(dtm_train)
nrow(dtm_train)
nrow(dados)
df <- rbind(dtm_train,dados$alc)
dtm_train[1:10, 1:10]
dtm_train[1:10, 1:20]
dtm_train[1:10, 1:50]
dtm_train[2:10, 1:50]
1
dtm_train[1:10, 1:50]
dtm_train[1:10, 1:50]
dtm_train[1:10, 1:500]
setkey(dados, id)
dados <- query("SELECT id, texto, alc FROM conversa LIMIT 50")
options(max.print = 99999999)
DIRETORIO = "C:\\Users\\Marcos\\Documents\\GitHub\\R-testes\\"
source(file=paste(DIRETORIO,"functions.R", sep = ""))
DATABASE <- "alemao"
clearConsole();
dados <- query("SELECT id, texto, alc FROM conversa LIMIT 50")
dados$alc[dados$alc == "cna"] <- "na"
dados$alc <- as.factor(dados$alc)
str(dados)
clearConsole()
library(text2vec)
library(data.table)
setDT(dados)
setkey(dados, id)
set.seed(2016L)
all_ids = dados$id
train_ids = sample(all_ids, nrow(dados))
it_train = itoken(dados$texto,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = train$id,
progressbar = TRUE)
prep_fun = tolower
tok_fun = word_tokenizer
stop_words = c("aber","als","am","an","auch","auf","aus","bei","bin","bis","bist","da","dadurch","daher","darum","das","da?","dass","dein","deine","dem","den","der","des","dessen","deshalb","die","dies","dieser","dieses","doch","dort","du","durch","ein","eine","einem","einen","einer","eines","er","es","euer","eure","f?r","hatte","hatten","hattest","hattet","hier","hinter","ich","ihr","ihre","im","in","ist","ja","jede","jedem","jeden","jeder","jedes","jener","jenes","jetzt","kann","kannst","k?nnen","k?nnt","machen","mein","meine","mit","mu?","mu?t","musst","m?ssen","m??t","nach","nachdem","nein","nicht","nun","oder","seid","sein","seine","sich","sie","sind","soll","sollen","sollst","sollt","sonst","soweit","sowie","und","unser","unsere","unter","vom","von","vor","wann","warum","was","weiter","weitere","wenn","wer","werde","werden","werdet","weshalb","wie","wieder","wieso","wir","wird","wirst","wo","woher","wohin","zu","zum","zur","?ber")
it_train = itoken(dados$texto,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = train$id,
progressbar = TRUE)
it_train = itoken(dados$texto,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = dados$id,
progressbar = TRUE)
vocab = create_vocabulary(it_train)
vocab = create_vocabulary(it_train, stopwords = stop_words)
vectorizer = vocab_vectorizer(vocab)
t1 = Sys.time()
dtm_train = create_dtm(it_train, vectorizer)
print(difftime(Sys.time(), t1, units = 'sec'))
dim(dtm_train)
identical(rownames(dtm_train), train$id)
identical(rownames(dtm_train), dados$id)
dtm_train
identical(numrow(dtm_train), numrow(dados$id))
identical(nrow(dtm_train), nrow(dados$id))
nrow(dtm_train)
nrow(dados$id)
nrow(dados)
identical(nrow(dtm_train), nrow(dados))
df <- rbind(dtm_train,dados$alc)
vocab
vectorizer = vocab_vectorizer(vocab)
vectorizer
dtm_train = create_dtm(it_train, vectorizer)
dtm_train
rownames(dtm_train)
rownames(dados$id)
rownames(dados$id)
col_headings <- c('id','texto','alc')
names(dados) <- col_headings
rownames(dados$id)
rownames(dados)
identical(rownames(dtm_train), dados)
identical(rownames(dtm_train), nrow(dados))
identical(rownames(dtm_train), train$id)
identical(rownames(dtm_train), dados$id)
rownames(dtm_train)
dados$id
dados$id <- as.integer(dados$id)
dados$id
rownames(dtm_train)
identical(rownames(dtm_train), dados$id)
dados$id <- as.character(dados$id)
dados$id
identical(rownames(dtm_train), dados$id)
identical(rownames(dtm_train), dados$id)
df <- rbind(dtm_train,dados$alc)
library('caret')
train_control <- trainControl(method="cv", number=10)
fit <- train(dtm_train, train$alc, method = "nb", trControl=train_control)
fit <- train(dtm_train, dados$alc, method = "nb", trControl=train_control)
identical(rownames(dtm_train), dados)
identical(rownames(dtm_train), dados$id)
dtm_train
merge(dtm_train,  dados, by = intersect(rownames(dtm_train), dados$ids))
merge(dtm_train, dados)
summ <- summary(dtm_train)
summ
dtm_train
summ
nrows(dtm_train)
nrow(dtm_train)
summ <- summary(dtm_train)
nrow(summ)
as.data.frame(as.matrix(dtm_train))
fit <- train(data, dados$alc, method = "nb", trControl=train_control)
fit <- train(data$texto, dados$alc, method = "nb", trControl=train_control)
data
data
data <- as.data.frame(as.matrix(dtm_train))
data
clearConsole()
data
fit <- train(data, dados$alc, method = "nb", trControl=train_control)
export(data, "alemao_bag.csv")
total <- rbind(data, dados$alc)
export(total, "alemao_bag.csv")
total
data
total <- rbind(data, dados$alc)
total
total <- merge(data, dados$alc)
export(total, "alemao_bag.csv")
total
total <- merge(data, dados)
total
options(max.print = 99999999)
DIRETORIO = "C:\\Users\\Marcos\\Documents\\GitHub\\R-testes\\"
source(file=paste(DIRETORIO,"functions.R", sep = ""))
DATABASE <- "alemao"
clearConsole();
dados <- query("SELECT id, texto, alc FROM conversa LIMIT 4")
dados$alc[dados$alc == "cna"] <- "na"
dados$alc <- as.factor(dados$alc)
dados$id <- as.character(dados$id)
str(dados)
clearConsole()
library(text2vec)
library(data.table)
setDT(dados)
setkey(dados, id)
set.seed(2016L)
prep_fun = tolower
tok_fun = word_tokenizer
stop_words = c("aber","als","am","an","auch","auf","aus","bei","bin","bis","bist","da","dadurch","daher","darum","das","da?","dass","dein","deine","dem","den","der","des","dessen","deshalb","die","dies","dieser","dieses","doch","dort","du","durch","ein","eine","einem","einen","einer","eines","er","es","euer","eure","f?r","hatte","hatten","hattest","hattet","hier","hinter","ich","ihr","ihre","im","in","ist","ja","jede","jedem","jeden","jeder","jedes","jener","jenes","jetzt","kann","kannst","k?nnen","k?nnt","machen","mein","meine","mit","mu?","mu?t","musst","m?ssen","m??t","nach","nachdem","nein","nicht","nun","oder","seid","sein","seine","sich","sie","sind","soll","sollen","sollst","sollt","sonst","soweit","sowie","und","unser","unsere","unter","vom","von","vor","wann","warum","was","weiter","weitere","wenn","wer","werde","werden","werdet","weshalb","wie","wieder","wieso","wir","wird","wirst","wo","woher","wohin","zu","zum","zur","?ber")
it_train = itoken(dados$texto,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = dados$id,
progressbar = TRUE)
vocab = create_vocabulary(it_train, stopwords = stop_words)
vectorizer = vocab_vectorizer(vocab)
dtm_train = create_dtm(it_train, vectorizer)
rownames(dtm_train)
rownames(dados)
col_headings <- c('id','texto','alc')
names(dados) <- col_headings
vectorizer = vocab_vectorizer(vocab)
t1 = Sys.time()
dtm_train = create_dtm(it_train, vectorizer)
print(difftime(Sys.time(), t1, units = 'sec'))
dim(dtm_train)
identical(rownames(dtm_train), dados$id)
nrow(dtm_train)
summ <- summary(dtm_train)
data <- as.data.frame(as.matrix(dtm_train))
clearConsole()
data
total <- rbind(data, dados$alc)
total <- merge(data, dados)
total
export(total, "alemao_bag.csv")
total <- merge(dados, data)
total <- merge(dados, data)
data
total <- merge(dados, data)
total <- merge(data, dados)
total <- merge(dados, data)
data
total <- merge(data, dados)
total
dados
data
dados
total <- merge(data, dados)
data
dados
clearConsole()
dados
total <- merge(data, dados)
total
df <- rbind(data,dados)
df <- rbind(data,dados)
df <- c(data,dados)
export(total, "alemao_bag.csv")
c(data,dados)
total <- c(data,dados)
export(total, "alemao_bag.csv")
total <- c(data,dados)
total
summary(total)
nrow(total)
total2 <- as.data.frame(total)
nrow(total)
nrow(total2)
export(total2, "alemao_bag.csv")
total <- c(dados, data)
total2 <- as.data.frame(total)
nrow(total2)
summary(total)
export(total2, "alemao_bag.csv")
total2$texto <- NULL
fit <- train(total2, total2$alc, method = "nb", trControl=train_control)
total2
summary(total2)
view(total2)
View(total2)
library('caret')
train_control <- trainControl(method="cv", number=10)
fit <- train(total2, total2$alc, method = "nb", trControl=train_control)
fit1 <- naiveBayes(total2, total2$alc, type="raw")
library("e1071")
fit1 <- naiveBayes(total2, total2$alc, type="raw")
pred1 <- predict(fit1, spam, type="class")
pred1 <- predict(fit1, total2, type="class")
confusionMatrix(pred1, total2$class)
fit1 <- naiveBayes(total2, total2$alc, type="raw")
pred1 <- predict(fit1, total2, type="class")
pred1 <- predict(fit1, total2, type="class")
fit <- train(alc~, data = total2total2$alc, method = "nb", trControl=train_control)
fit <- train(alc~, data = total2$alc, method = "nb", trControl=train_control)
fit <- train(total2$alc, data = total2, method = "nb", trControl=train_control)
fit <- train(alc, data = total2, method = "nb", trControl=train_control)
fit <- train(Alc, data = total2, method = "nb", trControl=train_control)
fit <- train(total2[,2], data = total2, method = "nb", trControl=train_control)
data(iris)
str(iris)
str(total2)
data(iris)
str(iris)
fit <- train(alc~., data = total2, method = "nb", trControl=train_control)
options(max.print = 99999999)
DIRETORIO = "C:\\Users\\Marcos\\Documents\\GitHub\\R-testes\\"
source(file=paste(DIRETORIO,"functions.R", sep = ""))
DATABASE <- "alemao"
clearConsole();
dados <- query("SELECT id, texto, alc FROM conversa LIMIT 4")
dados$alc[dados$alc == "cna"] <- "na"
dados$alc <- as.factor(dados$alc)
dados$id <- as.character(dados$id)
str(dados)
clearConsole()
library(text2vec)
library(data.table)
setDT(dados)
setkey(dados, id)
set.seed(2016L)
prep_fun = tolower
tok_fun = word_tokenizer
stop_words = c("aber","als","am","an","auch","auf","aus","bei","bin","bis","bist","da","dadurch","daher","darum","das","da?","dass","dein","deine","dem","den","der","des","dessen","deshalb","die","dies","dieser","dieses","doch","dort","du","durch","ein","eine","einem","einen","einer","eines","er","es","euer","eure","f?r","hatte","hatten","hattest","hattet","hier","hinter","ich","ihr","ihre","im","in","ist","ja","jede","jedem","jeden","jeder","jedes","jener","jenes","jetzt","kann","kannst","k?nnen","k?nnt","machen","mein","meine","mit","mu?","mu?t","musst","m?ssen","m??t","nach","nachdem","nein","nicht","nun","oder","seid","sein","seine","sich","sie","sind","soll","sollen","sollst","sollt","sonst","soweit","sowie","und","unser","unsere","unter","vom","von","vor","wann","warum","was","weiter","weitere","wenn","wer","werde","werden","werdet","weshalb","wie","wieder","wieso","wir","wird","wirst","wo","woher","wohin","zu","zum","zur","?ber")
it_train = itoken(dados$texto,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = dados$id,
progressbar = TRUE)
vocab = create_vocabulary(it_train, stopwords = stop_words)
vectorizer = vocab_vectorizer(vocab)
dtm_train = create_dtm(it_train, vectorizer)
rownames(dtm_train)
rownames(dados)
col_headings <- c('id','texto','alc')
names(dados) <- col_headings
vectorizer = vocab_vectorizer(vocab)
t1 = Sys.time()
dtm_train = create_dtm(it_train, vectorizer)
print(difftime(Sys.time(), t1, units = 'sec'))
dim(dtm_train)
identical(rownames(dtm_train), dados$id)
nrow(dtm_train)
data <- as.data.frame(as.matrix(dtm_train))
clearConsole()
data
clearConsole()
dados
total <- c(dados, data)
total2 <- as.data.frame(total)
nrow(total2)
summary(total)
export(total2, "alemao_bag.csv")
total2$texto <- NULL
view(total2)
str(total2)
fit <- train(alc~., data = total2, method = "nb", trControl=train_control)
train_control <- trainControl(method="cv", number=10)
fit <- train(alc~., data = total2, method = "nb", trControl=train_control)
library(caret)
data(iris)
train_control <- trainControl(method="cv", number=10)
grid <- expand.grid(.fL=c(0), .usekernel=c(FALSE))
model <- train(Species~., data=iris, trControl=train_control, method="nb", tuneGrid=grid)
model <- train(Species~., data=iris, trControl=train_control, method="nb")
model <- train(iris$Species, data=iris, trControl=train_control, method="nb")
model <- train(Species, data=iris, trControl=train_control, method="nb")
model <- train(Species~., data=iris, trControl=train_control, method="nb")
print(model)
total <- c(dados$alc, data)
data <- as.data.frame(as.matrix(dtm_train))
total <- c(dados$alc, data)
total2 <- as.data.frame(total)
summary(total)
export(total2, "alemao_bag.csv")
total2$texto <- NULL
total <- c(dados$alc, data)
total2 <- as.data.frame(total)
summary(total)
export(total2, "alemao_bag.csv")
data(iris)
str(total2)
library('caret')
train_control <- trainControl(method="cv", number=10)
fit <- train(alc~., data = total2, method = "nb", trControl=train_control)
summary(total)
total <- c(dados$alc, data)
total$alc;
total <- c(dados2, data)
dados2 <- dados$alc
total <- c(dados2, data)
dados2 <- dados$alc
DF[ , total2, drop = FALSE]
total2[ , keeps, drop = FALSE]
keeps <- "texto"
total2[ , keeps, drop = FALSE]
df <- subset(total2, select = -c("texto") )
df <- subset(total2, select = -c(texto) )
total2
str(total2)
total <- c(dados, data)
total2 <- as.data.frame(total)
str(total2)
df <- subset(total2, select = -c(texto) )
str(total2)
total2$texto
df$texto
str(total2)
total2 <- subset(total2, select = -c(texto, id) )
summary(total)
export(total2, "alemao_bag.csv")
library('caret')
train_control <- trainControl(method="cv", number=10)
fit <- train(alc~., data = total2, method = "nb", trControl=train_control)
train_control <- trainControl(method="cv", number=1)
fit <- train(alc~., data = total2, method = "nb", trControl=train_control)
fit
fit
fit <- train(alc~., data = total2, method = "nb", trControl=train_control)
export(total2, "alemao_bag.csv")
options(max.print = 99999999)
DIRETORIO = "C:\\Users\\Marcos\\Documents\\GitHub\\R-testes\\"
source(file=paste(DIRETORIO,"functions.R", sep = ""))
DATABASE <- "alemao"
dados <- query("SELECT id, texto, alc FROM conversa")
clearConsole();
dados$alc[dados$alc == "cna"] <- "na"
dados$alc <- as.factor(dados$alc)
dados$id <- as.character(dados$id)
str(dados)
clearConsole()
library(text2vec)
library(data.table)
setDT(dados)
setkey(dados, id)
set.seed(2016L)
prep_fun = tolower
tok_fun = word_tokenizer
stop_words = c("aber","als","am","an","auch","auf","aus","bei","bin","bis","bist","da","dadurch","daher","darum","das","da?","dass","dein","deine","dem","den","der","des","dessen","deshalb","die","dies","dieser","dieses","doch","dort","du","durch","ein","eine","einem","einen","einer","eines","er","es","euer","eure","f?r","hatte","hatten","hattest","hattet","hier","hinter","ich","ihr","ihre","im","in","ist","ja","jede","jedem","jeden","jeder","jedes","jener","jenes","jetzt","kann","kannst","k?nnen","k?nnt","machen","mein","meine","mit","mu?","mu?t","musst","m?ssen","m??t","nach","nachdem","nein","nicht","nun","oder","seid","sein","seine","sich","sie","sind","soll","sollen","sollst","sollt","sonst","soweit","sowie","und","unser","unsere","unter","vom","von","vor","wann","warum","was","weiter","weitere","wenn","wer","werde","werden","werdet","weshalb","wie","wieder","wieso","wir","wird","wirst","wo","woher","wohin","zu","zum","zur","?ber")
it_train = itoken(dados$texto,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = dados$id,
progressbar = TRUE)
vocab = create_vocabulary(it_train, stopwords = stop_words)
vectorizer = vocab_vectorizer(vocab)
dtm_train = create_dtm(it_train, vectorizer)
rownames(dtm_train)
rownames(dados)
col_headings <- c('id','texto','alc')
names(dados) <- col_headings
vectorizer = vocab_vectorizer(vocab)
t1 = Sys.time()
dtm_train = create_dtm(it_train, vectorizer)
print(difftime(Sys.time(), t1, units = 'sec'))
dim(dtm_train)
identical(rownames(dtm_train), dados$id)
nrow(dtm_train)
data <- as.data.frame(as.matrix(dtm_train))
total <- c(dados, data)
total2 <- as.data.frame(total)
total2 <- subset(total2, select = -c(texto, id) )
export(total2, "alemao_bag.csv")
